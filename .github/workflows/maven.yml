name: Java Deploy with Maven

on:
  create:
    tags:
      - v*
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build with Maven
        run: |
          mvn clean package -Dmaven.test.skip=true
      - name: Init Env
        run: |
          DOCKER_PROJECT = docker images | grep cmb | awk 'NR==1 {print $1}'
          DOCKER_VERSION = docker images | grep cmb | awk 'NR==1 {print $2}'
          echo "DOCKER_IMAGE_NAME=${{secrets.DOCKER_REGISTRY}}/${{secrets.DOCKER_ORGANIZTION}}/$DOCKER_PROJECT" >> $GITHUB_ENV
      - name: Push Docker
        run: |
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}} ${{secrets.DOCKER_REGISTRY}}
          docker push $DOCKER_IMAGE_NAME:$DOCKER_VERSION
          docker tag $DOCKER_IMAGE_NAME:$DOCKER_VERSION $DOCKER_IMAGE_NAME:latest
          docker push $DOCKER_IMAGE_NAME:latest


  pull-docker:
    needs: [build]
    name: Pull Docker
    runs-on: ubuntu-latest
    steps:
      - name: Init Env
        run: |
          DOCKER_PROJECT = docker images | grep cmb | awk 'NR==1 {print $1}'
          DOCKER_VERSION = docker images | grep cmb | awk 'NR==1 {print $2}'
          echo "DOCKER_IMAGE_NAME=${{secrets.DOCKER_REGISTRY}}/${{secrets.DOCKER_ORGANIZTION}}/$DOCKER_PROJECT" >> $GITHUB_ENV
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PWD }}
          port: ${{ secrets.PORT }}
          script: |
            docker stop $(docker ps --filter ancestor=$DOCKER_IMAGE_NAME -q)
            docker rm -f $(docker ps -a --filter ancestor=$DOCKER_IMAGE_NAME:latest -q)
            docker rmi -f $(docker images  $DOCKER_IMAGE_NAME:latest -q)
            docker login --username=${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }} ${{ secrets.DOCKER_REGISTRY }}
            docker pull $DOCKER_IMAGE_NAME:latest
            docker run -d -p 8081:8081 $DOCKER_IMAGE_NAME:latest
